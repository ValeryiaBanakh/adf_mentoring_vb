{
	"name": "FACT_module_8_copy1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "tOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "tOnlinePurchase"
				},
				{
					"dataset": {
						"referenceName": "tOnlineService",
						"type": "DatasetReference"
					},
					"name": "tOnlineService"
				},
				{
					"dataset": {
						"referenceName": "DimOnlineService",
						"type": "DatasetReference"
					},
					"name": "DimOnlineService"
				},
				{
					"dataset": {
						"referenceName": "tMovies",
						"type": "DatasetReference"
					},
					"name": "tMovies"
				},
				{
					"dataset": {
						"referenceName": "DimMovie",
						"type": "DatasetReference"
					},
					"name": "DimMovie"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTablesha",
						"type": "DatasetReference"
					},
					"name": "FactOnlinePurchase"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FactOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "sinkFactOnlinePurchase"
				}
			],
			"transformations": [
				{
					"name": "joinMovies"
				},
				{
					"name": "joinDimmovie"
				},
				{
					"name": "joinTonlineservice"
				},
				{
					"name": "joinDimonlineservice"
				},
				{
					"name": "derivedColumn"
				},
				{
					"name": "exists1"
				},
				{
					"name": "shahashkey"
				},
				{
					"name": "OnlinePurchase"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as integer,",
				"          ServiceId as integer,",
				"          MovieId as integer,",
				"          UserId as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string,",
				"          TransactionDate as timestamp,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select [ServiceId],[MovieId],[Price],[TransactionId],[TransactionDate]\\nfrom [dbo].[tOnlinePurchase]',",
				"     format: 'query') ~> tOnlinePurchase",
				"source(output(",
				"          ServiceId as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlineService",
				"source(output(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimOnlineService",
				"source(output(",
				"          MovieId as integer,",
				"          MovieIdNK as integer,",
				"          Budget as integer,",
				"          HomepagePath as string,",
				"          Title as string,",
				"          OriginalTitle as string,",
				"          ReleaseDate as date,",
				"          Revenue as long,",
				"          Runtime as integer,",
				"          MovieStatusId as integer,",
				"          AvgVote as decimal(3,1),",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tMovies",
				"source(output(",
				"          MovieKey as integer,",
				"          MovieIdNK as integer,",
				"          Title as string,",
				"          ReleaseDate as date,",
				"          Runtime as integer,",
				"          MovieStatus as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimMovie",
				"source(output(",
				"          DateKey as integer,",
				"          OnlineServiceKey as integer,",
				"          MovieKey as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> FactOnlinePurchase",
				"tOnlinePurchase, tMovies join(tOnlinePurchase@MovieId == tMovies@MovieId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMovies",
				"joinMovies, DimMovie join(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimmovie",
				"joinDimmovie, tOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinTonlineservice",
				"joinTonlineservice, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimonlineservice",
				"joinDimonlineservice derive(TransactionDate = toInteger(toString(year(TransactionDate))+rpad('0',2,toString(month(TransactionDate)))+rpad('0',2,toString(dayOfMonth(TransactionDate))))) ~> derivedColumn",
				"OnlinePurchase, shahashkey exists(OnlinePurchase@hash_key==shahashkey@hash_key,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"FactOnlinePurchase derive(hash_key = sha2(256, toString(DateKey), toString(OnlineServiceKey),toString(MovieKey), toString(Price),toString(TransactionId))) ~> shahashkey",
				"derivedColumn derive(hash_key = sha2(256, toString(TransactionDate), toString(ServiceKey),toString(MovieKey), toString(Price),toString(TransactionId))) ~> OnlinePurchase",
				"exists1 alterRow(upsertIf(true())) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DateKey as integer,",
				"          OnlineServiceKey as integer,",
				"          MovieKey as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['DateKey'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          DateKey = TransactionDate,",
				"          OnlineServiceKey = ServiceKey,",
				"          MovieKey,",
				"          Price,",
				"          TransactionId",
				"     )) ~> sinkFactOnlinePurchase"
			]
		}
	}
}